/* eslint-disable indent */
'use strict';
const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const version = require('./package.json').version;

/*
 * Custom plugin to add a version banner at the top of CSS and JS files
 * The version is retrieved from package.json
 */
class BannerPlugin {
    apply(compiler) {
        compiler.hooks.emit.tap('BannerPlugin', (compilation) => {
            const banner = `/*! Version: ${version} */\n`;
            for (const name in compilation.assets) {
                if (name.endsWith('.css') || name.endsWith('.js')) {
                    const asset = compilation.assets[name];
                    const source = asset.source();
                    compilation.assets[name] = {
                        source: () => banner + source,
                        size: () => banner.length + asset.size(),
                    };
                }
            }
        });
    }
}

/**
 * ReplacePlayerUrlsPlugin
 *
 * This custom Webpack plugin intercepts the HTML content generated by HtmlWebpackPlugin
 * and replaces resource URLs (CSS/JS) marked with the `data-player-url` attribute
 * with a CDN URL pointing to jsDelivr, using the version defined in package.json.
 *
 * Example:
 * <link href="../dist/css/device-renderer.min.css" data-player-url>
 * becomes:
 * <link href="https://cdn.jsdelivr.net/npm/@genymotion/device-web-player@<version>/dist/css/device-renderer.min.css">
 *
 * This allows versioned CDN-based loading of assets without hardcoding URLs in the HTML template.
 */
class ReplacePlayerUrlsPlugin {
    constructor(mode) {
        this.mode = mode;
    }

    apply(compiler) {
        let baseURL = '../dist/';
        if (this.mode === 'production') {
            baseURL = `https://cdn.jsdelivr.net/npm/@genymotion/device-web-player@${version}/dist`;
        } else if (this.mode === 'development') {
            baseURL = '';
        }

        compiler.hooks.compilation.tap('ReplacePlayerUrlsPlugin', (compilation) => {
            const hooks = require('html-webpack-plugin').getHooks(compilation);

            hooks.afterTemplateExecution.tap('ReplacePlayerUrlsPlugin', (data) => {
                // Supprime toutes les balises script et link existantes pour les fichiers du player
                data.html = data.html
                    .replace(/<link[^>]*device-renderer\.min\.css[^>]*>/g, '')
                    .replace(/<script[^>]*device-renderer\.min\.js[^>]*><\/script>/g, '');

                const cssTag = `<link rel="stylesheet" href="${baseURL}/css/device-renderer.min.css">`;
                const jsTag = `<script src="${baseURL}/js/device-renderer.min.js"></script>`;

                data.html = data.html.replace('</head>', `${cssTag}\n</head>`);
                data.html = data.html.replace('</body>', `${jsTag}\n</body>`);

                return data;
            });
        });
    }
}

module.exports = (env, argv) => {
    return {
        entry: './src/index.js',
        output: {
            path: path.resolve(__dirname, 'dist'),
            filename: 'js/device-renderer.min.js',
            /*
             * Exposes the genyDeviceWebPlayer object globally (i.e. on widows.genyDeviceWebPlayer) with all its components
             * (DeviceRenderer, DeviceRendererFactory, plugins, etc.)
             */
            library: 'genyDeviceWebPlayer',
            libraryTarget: 'umd',
            globalObject: 'this',
            clean: true,
        },
        module: {
            rules: [
                {
                    test: /\.js$/,
                    exclude: /node_modules/,
                    use: {
                        loader: 'babel-loader',
                        options: {
                            presets: [
                                [
                                    '@babel/preset-env',
                                    {
                                        targets:
                                            'last 2 versions, not dead, not ie 11, not ie_mob 11, not op_mini all, not and_uc 12',
                                    },
                                ],
                            ],
                        },
                    },
                },
                {
                    test: /\.scss$/,
                    use: [
                        MiniCssExtractPlugin.loader,
                        'css-loader',
                        {
                            loader: 'sass-loader',
                            options: {
                                implementation: require('sass'),
                                sassOptions: {
                                    outputStyle: 'expanded',
                                },
                                api: 'modern',
                            },
                        },
                    ],
                },
                {
                    test: /\.(png|jpg|gif|svg|ttf|woff|woff2|eot)$/,
                    /*
                     * With type: 'asset', assets > 8KB are not converted to base64
                     * We could use a parser with dataUrlCondition and maxSize to set a higher limit
                     * But using asset/inline is cleaner as it converts all assets to base64
                     */
                    type: 'asset/inline',
                },
            ],
        },
        plugins: [
            new MiniCssExtractPlugin({
                filename: 'css/device-renderer.min.css',
            }),
            new BannerPlugin(),
            new HtmlWebpackPlugin({
                template: './example/geny-window.html',
                filename: 'example/geny-window.html',
                inject: false,
                minify: argv.mode === 'production',
                templateParameters: {version: version},
            }),
            new CopyWebpackPlugin({
                patterns: [
                    {from: 'example/geny-window.js', to: 'example/geny-window.js'},
                    {from: 'example/geny-window.css', to: 'example/geny-window.css'},
                ],
            }),
            new ReplacePlayerUrlsPlugin(argv.mode),
        ],

        optimization: {
            minimize: argv.mode === 'production',
            minimizer: [
                new TerserPlugin({
                    extractComments: false,
                    terserOptions: {
                        compress: {
                            drop_console: argv.mode === 'production',
                        },
                    },
                }),
                ...(argv.mode === 'production'
                    ? [
                          new CssMinimizerPlugin({
                              minimizerOptions: {
                                  preset: [
                                      'default',
                                      {
                                          discardComments: {removeAll: true},
                                          normalizeWhitespace: true,
                                      },
                                  ],
                              },
                          }),
                      ]
                    : []),
            ],
        },
        devServer: {
            static: {
                directory: __dirname,
            },
            port: 8000,
            hot: true,
            open: {
                target: ['/example/geny-window.html'],
            },
            watchFiles: ['src/**/*', 'example/**/*'],
            liveReload: false,
            client: {
                overlay: false,
                progress: true,
            },
            devMiddleware: {
                writeToDisk: true,
            },
        },
    };
};
